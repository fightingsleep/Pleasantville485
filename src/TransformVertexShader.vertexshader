#version 330 core

// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in vec3 vertexNormal_modelspace;
layout(location = 2) in vec2 vertexUV;

// Output data ; will be interpolated for each fragment.
out vec3 fPosition;
out vec3 fNormal;
out vec2 fUV;

// Values that stay constant for the whole mesh.
uniform mat4 VP;
uniform mat4 M;

void main()
{    
    // Output position of the vertex, in clip space : MVP * position
    gl_Position =  VP * M * vec4(vertexPosition_modelspace,1);

    fPosition = (M * vec4(vertexPosition_modelspace, 1)).xyz;
    fNormal = (M * vec4(vertexNormal_modelspace, 1)).xyz;
	
    // UV of the vertex. No special space for this one.
    fUV = vertexUV;
}



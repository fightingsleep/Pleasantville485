#version 330 core

// Interpolated values from the vertex shaders
in vec3 fPosition;
in vec3 fNormal;
in vec2 fUV;

// Ouput data
out vec3 color;

// Values that stay constant for the whole mesh.
uniform sampler2D myTextureSampler;
uniform float shininess;
uniform vec4 ambientProduct;
uniform vec4 diffuseProduct;
uniform vec4 specularProduct;
uniform vec4 cameraPosition;
uniform vec4 lightPosition;

void main()
{ 
  vec3 position = normalize(fPosition); // 3d position of fragment
  vec3 normal = normalize(fNormal); // Normal direction of fragment
  vec3 lightDirection = normalize(lightPosition.xyz - fPosition);
  vec3 cameraDirection = normalize(cameraPosition.xyz - fPosition);
  vec3 halfway = normalize(lightDirection + cameraDirection);
  float phongTerm1 = max(dot(lightDirection, normal), 0.0);
  float phongTerm2 = pow(max(dot(normal, halfway), 0.0), shininess);
  vec3 ambient = ambientProduct.xyz;
  vec3 diffuse = (diffuseProduct * phongTerm1).xyz;
  vec3 specular = (specularProduct * phongTerm2).xyz;

  if(dot(lightDirection, normal) < 0.0)
  {
    specular = vec3(0,0,0);
  }

  // Output color
  color = (ambient * texture(myTextureSampler, fUV).rgb) + diffuse + specular;
}
